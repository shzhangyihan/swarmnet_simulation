#!/usr/bin/env python3

import argparse
import script.core_util.start_util as start_util

def main():
    parser = argparse.ArgumentParser(description='Default entry for simulation')
    parser.add_argument("-c", "--clean", action="store_true", help="Clean the build")
    parser.add_argument("-b", "--build", action="store_true", help="Build simulation")
    parser.add_argument("-r", "--run", action="store", help="Run simulation with the input json config file")
    parser.add_argument("-u", "--unit_test", action="store", help="Run unit test")
    parser.add_argument("-v", "--visualization", action="store", nargs='+', help="Render the visualization with the input speedup, to the output file (Optional)")
    parser.add_argument("-s", "--scheduler", action="store", help="Use scheduler with the input json config file to run simulations")

    args = parser.parse_args()

    if args.clean:
        start_util.clean_build()

    if args.build:
        if start_util.cmake_and_build() != 0:
            return
    
    if args.run:
        if start_util.run_simulation(args.run) != 0:
            return

    if args.unit_test:
        if start_util.cmake_and_build(args.unit_test) != 0:
            return
        if start_util.run_unit_test(args.unit_test) != 0:
            return

    if args.visualization:
        speed = args.visualization[0]
        motion_file = args.visualization[1]
        video_file = args.visualization[2]
        if start_util.run_visualization(speed, motion_file, video_file) != 0:
            return
    
    if args.scheduler:
        if start_util.start_scheduler(args.scheduler) != 0:
            return
    
if __name__ == "__main__":
    main()



